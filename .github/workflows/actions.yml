on:
  release:
    types: [created]
  push:


jobs:
  release:
    name: release ${{ matrix.target }} (with non-required env)
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            archive: zip
          - target: x86_64-unknown-linux-musl
            archive: tar.gz
          - target: x86_64-apple-darwin
            archive: zip
          - target: wasm32-wasi
            archive: zip tar.gz
    steps:
      - uses: actions/checkout@master
      - name: Setup protoc
        uses: arduino/setup-protoc@v2.0.0
      - name: Compile and release
        uses: rust-build/rust-build.action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          RUSTTARGET: ${{ matrix.target }}
          EXTRA_FILES: "README.md"
          SRC_DIR: "hello"
          ARCHIVE_TYPES: ${{ matrix.archive }}
          PRE_BUILD: "pre_build.sh"
          POST_BUILD: "test/post_build.sh"
          MINIFY: "yes"
  release_without_not_required:
    name: release ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        target: [x86_64-unknown-linux-musl]
    steps:
      - uses: actions/checkout@master
      - name: Cache protobuf
        uses: actions/cache@v2
        with:
            key: pb-linux-3.19.4
            path: ~/pb
        env:
            cache-name: pb
      - name: Install protobuf
        run: ./install-protobuf.sh
        shell: bash
        env:
            PROTOBUF_VERSION: 3.19.4
      - name: Protoc check
        run: protoc --version
        shell: bash
      - name: Compile and release
        uses: rust-build/rust-build.action@master
        with:
          RUSTTARGET: ${{ matrix.target }}
          UPLOAD_MODE: none
      - name: Checkout output
        run: ls -laR